/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Uploads a file to Google Cloud Storage */
        post: {
            parameters: {
                query?: {
                    /** @description The type of the file being uploaded */
                    type?: "log" | "general";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        files: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description File uploaded successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            data?: {
                                /** @example log/books.png */
                                file_name?: string;
                                /** @example https://storage.googleapis.com/tbs-dev/log/books.png */
                                file_url?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/generate-signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate link to upload */
        get: {
            parameters: {
                query: {
                    /** @description The file name of the file being uploaded */
                    fileName: string;
                    /** @description The content type of the file being uploaded */
                    contentType: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Link Generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            url?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/generate-upload-signature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate upload signature */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Link Generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            cloud_name?: string;
                            api_key?: string;
                            timestamp?: string;
                            signature?: string;
                            upload_preset?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login User */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email or phone number of the user */
                        identifier: string;
                        /** @description Password of the user */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Verification code sent to the email or phone number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forgot Password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email of the user */
                        email: string;
                        type: components["schemas"]["MFAType"];
                    };
                };
            };
            responses: {
                /** @description Verification code sent to the email or phone number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Forgot password identifier */
                            identifier: string;
                            /** @description Masked phone number */
                            phone?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/auth/verify-forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify forgot password identifier */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Forgot password identifier */
                        identifier: string;
                        /** @description Verification code sent to the email or phone number */
                        otp: string;
                    };
                };
            };
            responses: {
                /** @description Verify forgot password identifier */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Reset password identifier */
                            identifier: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Forgot password identifier */
                        identifier: string;
                        /** @description New password of the user, must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Reset password successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Access token */
                            accessToken: string;
                            /** @description Refresh token */
                            refreshToken: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/otp/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send OTP */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email or phone number of the user */
                        identifier: string;
                        type: components["schemas"]["MFAType"];
                        purpose: components["schemas"]["MFAPurpose"];
                    };
                };
            };
            responses: {
                /** @description Verification code sent to the email or phone number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SendOtpResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/otp/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify OTP */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email or phone number of the user */
                        identifier: string;
                        /** @description OTP cod */
                        otp: string;
                        purpose: components["schemas"]["MFAPurpose"];
                    };
                };
            };
            responses: {
                /** @description Verification code sent to the email or phone number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VerifyOtpResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get a list of users */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserListInput"];
                };
            };
            responses: {
                /** @description Successfully retrieved the user list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/iam/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Profiles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserNode"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Log */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the log to update */
                        logId?: number;
                        /** @description Updated facility ID */
                        facilityId?: number | null;
                        /** @description Updated weather condition */
                        weather?: string | null;
                        /** @description Updated temprature */
                        temprature?: number | null;
                        /** @description Updated array of open IDs */
                        openId?: number[] | null;
                        /** @description Updated array of mid IDs */
                        midId?: number[] | null;
                        /** @description Updated array of close IDs */
                        closeId?: number[] | null;
                    };
                };
            };
            responses: {
                /** @description Successfully updated the log */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        /** Add New Log */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the facility */
                        facilityId: number;
                        /** @description Date in the format of YYYY-MM-DD */
                        date: string;
                        /** @description Weather condition at the time of the log */
                        weather?: string;
                        /** @description Temperature at the time of the log */
                        temprature?: number;
                        /** @description Array of open IDs */
                        openId?: number[];
                        /** @description Array of mid IDs */
                        midId?: number[];
                        /** @description Array of close IDs */
                        closeId?: number[];
                    };
                };
            };
            responses: {
                /** @description Successfully added new log */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/detail/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Log Detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the log to be retrieved */
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved the log */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Log */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the log to be removed */
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully removed the log */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Log removed successfully */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Manager Logs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        filter?: {
                            /** @description Facility ID for the logs */
                            facilityIds?: number[] | null;
                            /** @description Search query for logs */
                            searchQuery?: string | null;
                            /**
                             * Format: date
                             * @description Start date for filtering logs
                             */
                            startDateFilter?: string | null;
                            /**
                             * Format: date
                             * @description End date for filtering logs
                             */
                            endDateFilter?: string | null;
                        };
                        metadata?: {
                            /** @description Page number for pagination */
                            page?: number;
                            /** @description Number of items per page */
                            size?: number;
                            sortBy?: components["schemas"]["MangerLogSortBy"];
                            sortOrder?: components["schemas"]["SortOrder"];
                        };
                    };
                };
            };
            responses: {
                /** @description Successfully retrieved manager logs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogListResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Log Entries */
        get: {
            parameters: {
                query: {
                    /** @description ID of the manager log to retrieve entries for */
                    managerLogId: string;
                    /** @description Flag to retrieve only the user's entries */
                    onlyMine?: boolean;
                    /** @description Search parameter */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved log entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntryResponse"];
                    };
                };
            };
        };
        /** Update Log Entry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the log entry to update */
                        entryId?: number;
                        /** @description Updated ID of the manager log */
                        managerLogId?: number | null;
                        /** @description Updated ID of the section */
                        sectionId?: number | null;
                        /** @description Updated array of media file URLs */
                        mediaFiles?: string[] | null;
                        mediaType?: components["schemas"]["LogEntryType"];
                        /** @description Updated description of the log entry */
                        description?: string | null;
                    };
                };
            };
            responses: {
                /** @description Successfully updated the log entry */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogEntryResponse"];
                    };
                };
            };
        };
        /** Add New Log Entry */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the manager log */
                        managerLogId?: number;
                        /** @description ID of the section */
                        sectionId?: number;
                        /** @description Array of media file URLs */
                        mediaFiles?: string[];
                        mediaType?: components["schemas"]["LogEntryType"];
                        /** @description Description of the log entry */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Successfully added new log entry */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogEntryResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/entry/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Log Entry */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the log entry to be deleted */
                    entryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted the log entry */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Log entry deleted successfully */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/entry/tagged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Log Entries Tagged In */
        get: {
            parameters: {
                query: {
                    size: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved log entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagEntryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLog/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update tags for a specific log entry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the manager log entry */
                        managerLogEntryId?: number;
                        /** @description Array of user IDs to subscribe */
                        userIds?: number[];
                    };
                };
            };
            responses: {
                /** @description Successfully updated subscribers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Settings For Facility */
        get: {
            parameters: {
                query: {
                    /** @description The ID of the facility as a string */
                    facilityId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of settings for the facility */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ManagerLogSettingResponse"];
                    };
                };
                /** @description Bad request if the facilityId is not provided or invalid */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Add a new log setting for a facility */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the facility */
                        facilityId?: number;
                        /** @description Array of log modules */
                        modules?: {
                            /** @description Order of the module */
                            order?: number;
                            /** @description Header of the module */
                            header?: string;
                            /** @description Array of allowed log entry types */
                            allowedTypes?: components["schemas"]["LogEntryType"][];
                        }[];
                    };
                };
            };
            responses: {
                /** @description Successfully added new log setting */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting/module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a module to a manager log setting */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LogModule"];
                };
            };
            responses: {
                /** @description Successfully added the module */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting/load": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Load modules from different facility */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The id of the facility to load modues to */
                        facilityId: number;
                        /** @description The id of the facility to load modues from */
                        loadFromFacilityId: number;
                    };
                };
            };
            responses: {
                /** @description Successfully added the module */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting/module/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update module orders */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the log module */
                        logModuleId?: number;
                        /** @description The new order of the module */
                        order?: number;
                    }[];
                };
            };
            responses: {
                /** @description Successfully updated the modules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting/module/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a module for a facility setting */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the module to update */
                    moduleId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LogModule"];
                };
            };
            responses: {
                /** @description Successfully updated the module */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request (e.g., Module ID not passed or invalid input) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Update a module for a facility setting */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the module to update */
                    moduleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully updated the module */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request (e.g., Module ID not passed or invalid input) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/managerLogSetting/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update subscribers for a specific log setting */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ID of the facility */
                        facilityId?: number;
                        /** @description Array of user IDs to subscribe */
                        userIds?: number[];
                    };
                };
            };
            responses: {
                /** @description Successfully updated subscribers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/media/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of facility media */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FacilityMediaListInput"];
                };
            };
            responses: {
                /** @description Successfully retrieved facility media */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FacilityMediaListResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new facility media */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFacilityMediaSchema"];
                };
            };
            responses: {
                /** @description Successfully created facility media */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        /** Delete a facility media */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeleteMedia"];
                };
            };
            responses: {
                /** @description Successfully deleted facility media */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a facility media */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Facility media ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateFacilityMediaSchema"];
                };
            };
            responses: {
                /** @description Successfully updated facility media */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/mediaComments/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of facility media comments */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FacilityMediaCommentsListInput"];
                };
            };
            responses: {
                /** @description Successfully retrieved facility media comments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FacilityMediaCommentsListResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/mediaComments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new facility media comment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFacilityMediaCommentSchema"];
                };
            };
            responses: {
                /** @description Successfully created facility media comment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/mediaComments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a facility media comment */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Facility media comment ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateFacilityMediaCommentSchema"];
                };
            };
            responses: {
                /** @description Successfully updated facility media comment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a facility media comment */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Facility media comment ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted facility media comment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/log/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a report of facilities */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        facilities: number[];
                        sendVia: components["schemas"]["SendVia"];
                        /**
                         * Format: date
                         * @example 2024-3-31
                         */
                        startDate: string;
                    };
                };
            };
            responses: {
                /** @description Return a report of facilities via email/download */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/facility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of facilities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of facilities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            id?: number;
                            /** @example Addams Tavern Westfield */
                            facilityName?: string;
                            /**
                             * Format: date-time
                             * @example 2024-02-12T07:46:02.882Z
                             */
                            createdAt?: string;
                            /**
                             * Format: date-time
                             * @example 2024-02-12T07:46:02.882Z
                             */
                            updatedAt?: string;
                        }[];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/facility/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves facility stats based on facility ID and date range */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        facilityIds?: number[];
                        nullable?: unknown;
                        /**
                         * Format: date
                         * @example 2024-06-01
                         */
                        startDate?: string | null;
                        /**
                         * Format: date
                         * @example 2024-06-30
                         */
                        endDate?: string | null;
                    };
                };
            };
            responses: {
                /** @description Facility stats retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: date
                             * @example 2024-06-01
                             */
                            date?: string;
                            /** @example 8.5 */
                            totalHoursWorked?: number;
                            /** @example 1500.75 */
                            totalMoneyMade?: number;
                        }[];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/facility/total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves facility stats based on facility ID and date range */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        facilityIds?: (number | null)[];
                        /**
                         * Format: date
                         * @example 2024-06-01
                         */
                        startDate?: string | null;
                        /**
                         * Format: date
                         * @example 2024-06-30
                         */
                        endDate?: string | null;
                    };
                };
            };
            responses: {
                /** @description Total stats retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 8.5 */
                            totalHoursWorked?: number;
                            totalMoneyMade?: number;
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/feedback/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves a list of feedback */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        filter?: {
                            feedbackType?: components["schemas"]["FeedbackType"];
                            /** @description Filter by read status */
                            isRead?: boolean | null;
                            /**
                             * Format: date
                             * @description Start date for filtering feedback
                             */
                            startDateFilter?: string | null;
                            /**
                             * Format: date
                             * @description End date for filtering feedback
                             */
                            endDateFilter?: string | null;
                            facilityId?: number;
                            /** @description Search query for feedback */
                            searchQuery?: string | null;
                        };
                        metadata?: {
                            /** @description Page number for pagination */
                            page?: number;
                            /** @description Number of items per page */
                            size?: number;
                            /** @description Field to sort by */
                            sortBy?: string;
                            /**
                             * @description Sort order
                             * @enum {string}
                             */
                            sortOrder?: "asc" | "desc";
                        };
                    };
                };
            };
            responses: {
                /** @description Successfully retrieved feedback */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeedbackListResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new feedback */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        feedbackType?: components["schemas"]["FeedbackType"];
                        message?: string;
                        facilityId?: number | null;
                        contactBy?: components["schemas"]["ContactByType"];
                        isAnonymous?: boolean;
                    };
                };
            };
            responses: {
                /** @description Feedback created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/feedback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a feedback */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Feedback ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        facilityId?: number | null;
                        feedbackType?: components["schemas"]["FeedbackType"];
                        /** @example The service was slow. */
                        message?: string | null;
                        contactBy?: components["schemas"]["ContactByType"];
                        /** @example false */
                        isAnonymous?: boolean;
                        /** @example false */
                        isRead?: boolean | null;
                    };
                };
            };
            responses: {
                /** @description Feedback updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a feedback */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Feedback ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Feedback updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BaseResponse"];
                    };
                };
                /** @description Feedback not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserFilterInput: {
            userType?: components["schemas"]["UserType"];
            searchQuery?: string | null;
            facilityId?: number | null;
        };
        UserMetadata: {
            page?: number;
            size?: number;
            /** @default createdAt */
            sortBy: string;
            sortOrder?: components["schemas"]["SortOrder"];
        };
        UserListInput: {
            filter?: components["schemas"]["UserFilterInput"];
            metadata?: components["schemas"]["UserMetadata"];
        };
        BaseResponse: {
            success: boolean;
            entityId?: number;
        };
        LoginResponse: {
            success: boolean;
            identifier: string;
            phone: string;
        };
        Log: {
            metadata: {
                page: number;
                size: number;
                totalDocs: number;
            };
        };
        LogEntry: {
            id: number;
        };
        LogEntryResponse: {
            success: boolean;
        };
        SendOtpResponse: {
            success: boolean;
            message: string;
        };
        VerifyOtpResponse: {
            success: boolean;
            token: string;
        };
        /**
         * @description Send via
         * @example download
         * @enum {string}
         */
        SendVia: "email" | "download";
        /**
         * @description Type of authentication
         * @enum {string}
         */
        MFAType: "EMAIL" | "SMS";
        /**
         * @description Purpose of the OTP
         * @enum {string}
         */
        MFAPurpose: "LOGIN" | "REGISTER" | "RESET";
        /**
         * @description Manager log sort options
         * @enum {string}
         */
        MangerLogSortBy: "createdAt" | "facilityName" | "weather" | "temprature";
        /**
         * @description SortOrder
         * @enum {string}
         */
        SortOrder: "ASC" | "DESC";
        /**
         * @description UserType
         * @enum {string}
         */
        UserType: "MANAGER";
        /**
         * @description ContactByType
         * @enum {string}
         */
        ContactByType: "EMAIL" | "PHONE";
        /**
         * @description FeedbackType
         * @enum {string}
         */
        FeedbackType: "APP" | "WORK";
        /**
         * @description Log entry type
         * @enum {string}
         */
        LogEntryType: "ALBUM" | "VIDEO" | "DOCUMENT" | "LINK" | "TEXT_IMAGE";
        LogUser: {
            id: number;
            firstName: string;
            lastName: string;
            phoneNumber?: string;
            email?: string;
        };
        LogResponse: {
            id?: number;
            facilityId?: number;
            weather?: string;
            temprature?: number | null;
            /** Format: date-time */
            createdAt?: string;
            facilityName?: string;
            open?: components["schemas"]["LogUser"][];
            mid?: components["schemas"]["LogUser"][];
            close?: components["schemas"]["LogUser"][];
        };
        MetadataResponse: {
            page: number;
            size: number;
            totalDocs: number;
        };
        LogListResponse: {
            nodes: components["schemas"]["LogResponse"][];
            metadata: components["schemas"]["MetadataResponse"];
        };
        Module: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            facilityId: number;
            /** Format: int32 */
            order: number;
            headerTitle: string;
            allowedTypes: components["schemas"]["LogEntryType"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ManagerLogSettingResponse: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            facilityId: number;
            modules: components["schemas"]["Module"][];
            subscribers?: components["schemas"]["MinimalUserNode"][];
        };
        LogModule: {
            /** @description ID of the manager log setting (optional) */
            facilityId?: number;
            /** @description Order of the module */
            order?: number;
            /** @description Header of the module */
            header?: string;
            /** @description Array of allowed log entry types */
            allowedTypes?: components["schemas"]["LogEntryType"][];
        };
        ManagerLogEntry: {
            id?: number;
            managerLogId?: number;
            sectionId?: number;
            sectionName?: string;
            facilityName?: string;
            mediaFiles?: string[];
            /** @description media file type */
            mediaType?: components["schemas"]["LogEntryType"];
            description?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            tags?: components["schemas"]["LogUser"][];
            user?: components["schemas"]["LogUser"];
        };
        TaggedEntry: {
            id?: number;
            managerLogId?: number;
            sectionId?: number;
            facilityId?: number;
            sectionName?: string;
            facilityName?: string;
            mediaFiles?: string[];
            /** @description media file type */
            mediaType?: components["schemas"]["LogEntryType"];
            description?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        EntryResponse: {
            modules?: components["schemas"]["Module"][];
            entries?: components["schemas"]["ManagerLogEntries"];
        };
        TagEntryResponse: {
            metadata?: components["schemas"]["MetadataResponse"];
            entries?: components["schemas"]["TaggedEntry"][];
        };
        ManagerLogEntries: components["schemas"]["ManagerLogEntry"][];
        FeedbackListResponse: {
            nodes: components["schemas"]["FeedbackResponse"][];
            metadata: components["schemas"]["MetadataResponse"];
        };
        FeedbackResponse: {
            /** @example 1 */
            id?: number;
            feedbackType?: components["schemas"]["FeedbackType"];
            facilityName?: string;
            facilityId?: number;
            /** @example The service was slow. */
            message?: string;
            /** @example John Doe */
            createdByName?: string;
            /** @example false */
            isAnonymous?: boolean;
            contactBy?: components["schemas"]["ContactByType"];
            /** @example false */
            isRead?: boolean;
            /**
             * Format: date-time
             * @example 2024-02-12T07:46:02.882Z
             */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        MinimalUserNode: {
            id: number;
            organizationId?: number;
            email: string;
            firstName: string;
            lastName: string;
            phoneNumber: string;
            profilePicture?: string | null;
        };
        UserNode: {
            id: number;
            organizationId: number;
            email: string;
            firstName: string;
            lastName: string;
            phoneNumber: string;
            profilePicture?: string | null;
            city?: string | null;
            state?: string | null;
            address?: string | null;
            zipCode?: string | null;
            roleId?: number | null;
            status?: string | null;
            /** Format: date-time */
            hireDate?: string;
            /** Format: date-time */
            dob?: string | null;
            hasSuperUserAccess?: boolean | null;
            /** Format: date-time */
            createdAt?: string | null;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        Metadata: {
            page: number;
            size: number;
            totalDocs: number;
        };
        UserResponse: {
            nodes: components["schemas"]["UserNode"][];
            metadata: components["schemas"]["Metadata"];
        };
        FacilityMediaListInput: {
            filter?: {
                facilityIds?: number[] | null;
                organizationId?: number | null;
                type?: components["schemas"]["MediaType"];
                /** Format: date */
                startDateFilter?: string | null;
                /** Format: date */
                endDateFilter?: string | null;
                searchQuery?: string | null;
            };
            metadata?: {
                /** @default 1 */
                page: number;
                /** @default 10 */
                size: number;
                /** @default createdAt */
                sortBy: string;
                /**
                 * @default desc
                 * @enum {string}
                 */
                sortOrder: "asc" | "desc";
            };
        };
        FacilityMediaResponse: {
            id?: number;
            profilePicture?: string;
            fullName?: string;
            facilityId?: number;
            organizationId?: number;
            mediaUrl?: string;
            mediaName?: string;
            type?: components["schemas"]["MediaType"];
            commentCount?: number;
            createdBy?: number;
            updatedBy?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        FacilityMediaListResponse: {
            nodes: components["schemas"]["FacilityMediaResponse"][];
            metadata: components["schemas"]["MetadataResponse"];
        };
        CreateFacilityMediaSchema: {
            facilityId?: number;
            organizationId?: number;
            mediaUrl?: string;
            mediaName?: string;
        };
        DeleteMedia: {
            mediaIds?: number[];
        };
        UpdateFacilityMediaSchema: {
            facilityId?: number | null;
            organizationId?: number | null;
            mediaUrl?: string | null;
            mediaName?: string | null;
        };
        FacilityMediaCommentsListInput: {
            filter?: {
                facilityMediaId?: number | null;
                /** Format: date */
                startDateFilter?: string | null;
                /** Format: date */
                endDateFilter?: string | null;
                searchQuery?: string | null;
            };
            metadata?: {
                /** @default 1 */
                page: number;
                /** @default 10 */
                size: number;
                /** @default createdAt */
                sortBy: string;
                /**
                 * @default desc
                 * @enum {string}
                 */
                sortOrder: "asc" | "desc";
            };
        };
        FacilityMediaCommentResponse: {
            id?: number;
            facilityMediaId?: number;
            createdBy?: number;
            profilePicture?: string;
            fullName?: string;
            comment?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        FacilityMediaCommentsListResponse: {
            nodes: components["schemas"]["FacilityMediaCommentResponse"][];
            metadata: components["schemas"]["MetadataResponse"];
        };
        CreateFacilityMediaCommentSchema: {
            facilityMediaId?: number;
            comment?: string;
        };
        UpdateFacilityMediaCommentSchema: {
            comment?: string | null;
        };
        /**
         * @description Media type
         * @enum {string}
         */
        MediaType: "LOG" | "GENERAL";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;

export enum type {
  Log = 'log',
  General = 'general',
}

export enum json {
  Asc = 'asc',
  Desc = 'desc',
}

export enum SendVia {
  Email = 'email',
  Download = 'download',
}

export enum MFAType {
  Email = 'EMAIL',
  Sms = 'SMS',
}

export enum MFAPurpose {
  Login = 'LOGIN',
  Register = 'REGISTER',
  Reset = 'RESET',
}

export enum MangerLogSortBy {
  CreatedAt = 'createdAt',
  FacilityName = 'facilityName',
  Weather = 'weather',
  Temprature = 'temprature',
}

export enum EmployeeSortBy {
  CreatedAt = 'createdAt',
  FacilityName = 'facilityName',
  Name = 'name',
}

export enum OrganizationSortBy {
  CreatedAt = 'createdAt',
  Name = 'organizationName',
}

export enum RestaurantSortBy {
  CreatedAt = 'createdAt',
  Name = 'restaurantName',
}

export enum FacilityGroupSortBy {
  CreatedAt = 'createdAt',
  Name = 'facilityGroupName',
}

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC',
}

export enum UserType {
  Manager = 'MANAGER',
}

export enum ContactByType {
  Email = 'EMAIL',
  Phone = 'PHONE',
}

export enum FeedbackType {
  App = 'APP',
  Work = 'WORK',
}

export enum LogEntryType {
  Album = 'ALBUM',
  Video = 'VIDEO',
  Document = 'DOCUMENT',
  Link = 'LINK',
  TextImage = 'TEXT_IMAGE',
}

export enum FacilityMediaListInput {
  Asc = 'asc',
  Desc = 'desc',
}

export enum FacilityMediaCommentsListInput {
  Asc = 'asc',
  Desc = 'desc',
}

export enum MediaType {
  Log = 'LOG',
  General = 'GENERAL',
}
